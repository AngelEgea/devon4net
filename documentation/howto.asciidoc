:toc:

= How to use devon4net

toc::[]
== Introduction

As you may know, https://devonfw.com/website/pages/docs/devonfw-guide_devon4net.wiki_master-devon4net.asciidoc.html[devon4net] is a framework that will assist you in getting started on your.NET applications and integrating high end configurable components. 

This article contains information in the form of a step-by-step guide on how to do a variety of operations.

== How to: Create a new devon4net project
In this part, you will learn you how to easily create a new project using devon4net libraries and start working on it. You can create a variety of applications thanks to the different templates available. There are also multiple ways to create a new project, we will show you the most common ways.

NOTE: The configuration characteristics are not covered in this document. Please feel free to read the documentation for each component to discover how they work and the configuration options available.

=== Command Line Interface (CLI)
This is the fastest and most efficient way. You will be installing and starting a project thanks to the template available in the NuGet Gallery using CLI. For this part you will need to have .NET 6.0 SDK installed. You can run the following command to check your version:

[source, console]
----
> dotnet --version
6.0.102
----

If you don't get any response please follow the https://docs.microsoft.com/en-us/dotnet/core/install/[installation guide] provided by Microsoft to install the latest version of .Net SDK for your OS.

==== Step 1 - Install the Template
Open your favourite terminal (Windows/Linux/macOS) and run the command showed below to install the latest version of the the https://www.nuget.org/packages/Devon4Net.WebAPI.Template/[devon4net web API template]:

[source, console]
----
> dotnet new --install Devon4Net.WebAPI.Template
The following template packages will be installed:
   Devon4Net.WebApI.Template

Success: Devon4Net.WebAPI.Template::6.0.3 installed the following templates:
Template Name                    Short Name    Language  Tags
-------------------------------  ------------  --------  ------------------------------
Devon4Net API solution template  Devon4NetAPI  [C#]      devonfw/Devon4Net/Devon4NetAPI
----

We recommend you updating the template to the latest version. However, using the following option, you can select the version of your interest:
[source, console]
----
> dotnet new --install Devon4Net.WebAPI.Template::6.0.3
----

Now you will have the template available in your Visual Studio 2022. Just type `devon4net` in the search bar when creating a new project!

.Devon4Net API template in VS2022
image::images/api_template_ide.png[]

==== Step 2 - Create a new project
To create a new project run the following command:
[source, console]
----
> dotnet new Devon4NetAPI
The template "Devon4Net API solution template" was created successfully.
----
This will create a project with the default name in the actual directory. If you want to specify the desired name and output directory you can specify the following options: 
[source, console]
----
> dotnet new Devon4NetAPI --name MyProject --output C:\Projects\MyProject
The template "Devon4Net API solution template" was created successfully.
----

You can do it also choosing the template when creating a new project in Visual Studio 2022 as shown in figure 1, and configuring the name and output directory as shown in figure 2.

.Devon4Net API template in VS2022
image::images/api_template_configure.png[]

==== Step 3 - Run it
After running it with Kestrel you will be able to access to the swagger `index.html` and try the API in the following link: https://localhost.8085/swagger/index.html[https://localhost.8085/swagger/index.html]

=== Create it from scratch in Visual Studio 2022
This method is a little more time consuming, but it allows for a more customized configuration and project structure. You will be using Visual Studio 2022 to create the project and add everything you need by hand. 

==== Step 1 - Create a new project
Create a new ASP.NET Core Web API project using the template provided by Visual Studio. You can type `api` in the search bar and select it as shown in figure 3.

.ASP.NET Core Web API template in VS2022
image::images/api_template_create_project.png[]

Once you go through all the initial configuration process, choosing a name, location and so on; you will find your project as shown in the next image.

.Default ASP.NET Core Web API template structure
image::images\api_template_initial_structure.png[]

You can delete both `WeatherForecastController.cs` and `WeatherForecast.cs` as they are an example in the template but we recommend you keeping them so you can try the API when done with all the steps.

==== Step 2 - Add the NuGet reference
To install the NuGet package for the API Configuration we will use the Visual Studio package manager console. To open it, go to `View > Other Windows > Package Manager Console` as shown in the figure below.

.Package Manager Console location in menu
image::images\api_template_package_manager.png[]

Now you can run the following command. It will take a minute to download and install all the packages:
[source, console]
----
PM> install-package Devon4Net.Application.WebAPI.Configuration
----
Once its done, you should be able to see the dependency in the Package Dependencies of the project.

==== Step 3 - Set up your project

Now you will need to add some configuration in the `Program.cs`. The following line will configure the components that were imported with the NuGet installation, making use of an extension method for the `ServiceCollection` class (the default implementation of `IServiceCollection` interface):

[source, c#]
----
builder.Services.ConfigureDevonFw(builder.Configuration);
----

Now you'll need to configure the middlewares included with the following line:

[source, c#]
----
app.ConfigureDevonFw();
----

NOTE: Don't forget to import the package to be able to use this methods!

The `Program.cs` will end up looking like this:

[source, c#]
----
// devon4net
using Devon4Net.Application.WebAPI.Configuration;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllers();

builder.Services.AddEndpointsApiExplorer();

builder.Services.AddSwaggerGen();

// devon4net
builder.Services.ConfigureDevonFw(builder.Configuration);

var app = builder.Build();

// devon4net
app.ConfigureDevonFw();

app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

app.Run();
----

==== Step 4 - Configure components

The lines added on the previous step will need some configuration in the `appsettings.json`:

[source, json]
----
{
  "devonfw": {
    "UseDetailedErrorsKey": true,
    "UseIIS": false,
    "UseSwagger": true,
    "UseXsrf": true,
    "UseModelStateValidation": true,
    "Environment": "Development",
    "ForceUseHttpsRedirection": false,
    "Kestrel": {
      "UseHttps": false,
      "HttpProtocol": "Http1AndHttp2", //Http1, Http2, Http1AndHttp2, none
      "ApplicationPort": 8085,
      "SslProtocol": "Tls12", //Tls12, Tls13, none. For Https2 Tls12 is needed
      "ExtraSettings": {
        "KeepAliveTimeout": 120, //in seconds
        "MaxConcurrentConnections": 100,
        "MaxConcurrentUpgradedConnections": 100,
        "MaxRequestBodySize": 28.6, //In MB. The default maximum request body size is 30,000,000 bytes, which is approximately 28.6 MB
        "Http2MaxStreamsPerConnection": 100,
        "Http2InitialConnectionWindowSize": 131072, // From 65,535 and less than 2^31 (2,147,483,648)
        "Http2InitialStreamWindowSize": 98304, // From 65,535 and less than 2^31 (2,147,483,648)
        "AllowSynchronousIO": true
      }
    },
    "IIS": {
      "ForwardClientCertificate": true,
      "AutomaticAuthentication": true,
      "AuthenticationDisplayName": ""
    }
  }
}
----

And also in the `appsettings.Development.json`:

[source, json]
----
{
  "ExtraSettingsFiles": [
    "appsettingsExtra.json",
    "Directory path",
    "Specific file name"
  ],
  "KillSwitch": {
    "UseKillSwitch": false,
    "EnableRequests": false,
    "HttpStatusCode": 403
  },
  "ConnectionStrings": {
    "Default": "Todos",
    "Employee": "Employee",
    "RabbitMqBackup": "Add your database connection string here for messaging backup",
    "MediatRBackup": "Add your databascere connection string here for messaging backup"
  },
  "Certificates": {
    "ServerCertificate": {
      "Certificate": "localhost.pfx",
      "CertificatePassword": "localhost"
    },
    "ClientCertificate": {
      "DisableClientCertificateCheck": true,
      "RequireClientCertificate": false,
      "CheckCertificateRevocation": true,
      "ClientCertificates": {
        "Whitelist": [
          "3A87A49460E8FE0E2A198E63D408DC58435BC501"
        ]
      }
    }
  },
  "Headers": {
    "AccessControlExposeHeader": "Authorization",
    "StrictTransportSecurityHeader": "",
    "XFrameOptionsHeader": "DENY",
    "XssProtectionHeader": "1;mode=block",
    "XContentTypeOptionsHeader": "nosniff",
    "ContentSecurityPolicyHeader": "",
    "PermittedCrossDomainPoliciesHeader": "",
    "ReferrerPolicyHeader": ""
  },
  "Cors": []
}
----

=== References
Here are some interesting references to continue learning about this topic:

* https://docs.microsoft.com/en-us/dotnet/core/install/[Install .NET on your OS - Microsoft Docs]

* https://docs.microsoft.com/es-es/dotnet/core/tools/[.NET CLI overview - Microsoft Docs]

* https://docs.microsoft.com/es-es/dotnet/core/tools/dotnet-new-install[dotnet new --install option - Microsoft Docs]

* https://docs.microsoft.com/es-es/dotnet/core/tools/dotnet-new[dotnet new - Microsoft Docs]


== How to: Create and add certificates to a project
In this part, you will learn how to easily create a new certificate and properly add it to your devon4net project. 


=== Create a certificate using OpenSSL
In order to create our own certificate for development purposes we will be using https://github.com/openssl/openssl[OpenSSL] toolkit. To ensure correct behavior, make sure the tool is properly installed.

NOTE: Please refer to the https://www.openssl.org/docs/man3.0/man1/[OpenSSL command documentation] to learn more about the commands used in this guide and how to install the toolkit.

==== Step 1 - Create a Certificate Authority (CA)
First we will need to create a Certificate Authority to sign the certificate. For that, we will run the following command which will create the certificate `RootCA.pem` and the corresponding private key `RootCA.key`. 

[source, console]
----
> openssl req -x509 -nodes -new -sha256 -days 1024 -newkey rsa:2048 -keyout RootCA.key -out RootCA.pem -subj "/C=ES/ST=Valencia/L=Valencia/O=Certificates/CN=MyProjectCertificate.local"
----

Now we will create the public key `RootCA.crt` for the certificate by running the following command:

[source, console]
----
> openssl x509 -outform pem -in RootCA.pem -out RootCA.crt
----

If you want to export the certificate you can run the command:

[source, console]
----
> openssl pkcs12 -export -out RootCA.pfx -inkey RootCA.key -in RootCA.crt
----

==== Step 2 - Create a Certificate signed by the CA

To create a new certificate run the following command:
[source, console]
----
> openssl req -new -nodes -newkey rsa:2048 -keyout localhost.key -out localhost.csr -subj "/C=ES/ST=Valencia/L=Valencia/O=Certificates/CN=localhost.local"
----

Before signing it, create a `domains.ext` that contains the following:

[source, txt]
----
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names
[alt_names]
DNS.1 = localhost
DNS.2 = localhost.local
DNS.3 = 127.0.0.1
DNS.4 = fake1.local
DNS.5 = fake2.local
----

Once the files are created, you'll need to sign the certificate with the CA we created earlier:
[source, console]
----
> openssl x509 -req -sha256 -days 1024 -in localhost.csr -CA RootCA.pem -CAkey RootCA.key -CAcreateserial -extfile domains.ext -out localhost.crt
----

Run the next command to export the certificate:

[source, console]
----
> openssl pkcs12 -export -out localhost.pfx -inkey localhost.key -in localhost.crt
----

You will end up having something like this:

.Certification Authority (left) and localhost certificate signed by CA (right)
image::images/certificates.png[]

=== Add certificates to a devon4net project
Once you have created a certificate or in case you already have yours, you can add it to your project thanks to devon4net tools. 

==== Step 1 - Add it to your project 

Locate the Certificates directory in your startup project. If it doesn't exist, please create it and drop your certificate `.pfx` as shown in figure 2.


.Certificates directory in startup project
image::images/certificates_add.png[]


==== Step 2 - Configure your appsettings

Now configure your certificate in `appsettings.Development.json`. For that, you'll need to specify the file name and the password you chose. Look for the `ServerCertificate` configuration and add something like this:

[source, json]
----
"Certificates": {
    "ServerCertificate": {
        "Certificate": "localhost.pfx",
        "CertificatePassword": "12345"
    },
    "ClientCertificate": {
        "DisableClientCertificateCheck": true,
        "RequireClientCertificate": false,
        "CheckCertificateRevocation": true,
        "ClientCertificates": {
        "Whitelist": [
            "3A87A49460E8FE0E2A198E63D408DC58435BC501"
            ]
        }
    }
},
----

=== References
Here are some interesting references to continue learning about this topic:

* https://github.com/openssl/openssl[OpenSSL]

* https://www.openssl.org/docs/man1.0.2/man1/openssl-req.html[`req` command documentation - OpenSSL Docs]

* https://www.openssl.org/docs/man1.0.2/man1/x509.html[`x509` command documentation - OpenSSL Docs]

* https://www.openssl.org/docs/man3.0/man1/pkcs12.html[`pkcs12` command documentation - OpenSSL Docs]

